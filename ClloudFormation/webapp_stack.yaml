Description: stelligent - assignment-test
Parameters:
  VPCAZ:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: The Availability Zone to use for the simple VPC.
  VPCAZ1:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: The Availability Zone to use for the simple VPC.
Mappings:
  AWSLinuxAMIs:
    us-east-1:
      AMI: ami-1ecae776
    us-west-2:
      AMI: ami-e7527ed7
    us-west-1:
      AMI: ami-d114f295
    eu-west-1:
      AMI: ami-a10897d6
    eu-central-1:
      AMI: ami-a8221fb5
    ap-northeast-1:
      AMI: ami-cbf90ecb
    ap-southeast-1:
      AMI: ami-68d8e93a
    ap-southeast-2:
      AMI: ami-fd9cecc7
    sa-east-1:
      AMI: ami-b52890a8
  AWSNATAMIs:
    us-east-1:
      AMI: ami-303b1458
    us-west-2:
      AMI: ami-69ae8259
    us-west-1:
      AMI: ami-7da94839
    eu-west-1:
      AMI: ami-6975eb1e
    eu-central-1:
      AMI: ami-46073a5b
    ap-southeast-1:
      AMI: ami-b49dace6
    ap-northeast-1:
      AMI: ami-03cf3903
    ap-southeast-2:
      AMI: ami-e7ee9edd
    sa-east-1:
      AMI: ami-fbfa41e6
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
  PublicSubnet:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Ref VPCAZ
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PublicSubnet1:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Ref VPCAZ1
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PrivateSubnet:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Ref VPCAZ
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
  PrivateSubnet1:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Ref VPCAZ1
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC
  NATInstance:
    DependsOn:
      - GatewayAttachmentToVPC
      - InstancesToNATSecurityGroup
      - PublicSubnet
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone: !Ref VPCAZ
      ImageId: !FindInMap 
        - AWSNATAMIs
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref InstancesToNATSecurityGroup
      SourceDestCheck: false
      SubnetId: !Ref PublicSubnet
  RoutesForPrivateSubnet:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteToNat:
    DependsOn:
      - NATInstance
      - RoutesForPrivateSubnet
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance
      RouteTableId: !Ref RoutesForPrivateSubnet
  NACLBindingForPrivateSubnet:
    DependsOn:
      - PrivateSubnet
      - PrivateSubnet1
      - GenericNACL
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref GenericNACL
  RoutesBindingForPrivateSubnet:
    DependsOn:
      - RoutesForPrivateSubnet
      - PrivateSubnet
      - PrivateSubnet1
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RoutesForPrivateSubnet
      SubnetId: !Ref PrivateSubnet
  RoutesBindingForPrivateSubnet1:
    DependsOn:
      - RoutesForPrivateSubnet
      - PrivateSubnet
      - PrivateSubnet1
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RoutesForPrivateSubnet
      SubnetId: !Ref PrivateSubnet1
  GatewayToInternet:
    Type: 'AWS::EC2::InternetGateway'
  RoutesForPublicSubnet:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  GenericNACL:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  GatewayAttachmentToVPC:
    DependsOn:
      - GatewayToInternet
      - VPC
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref GatewayToInternet
      VpcId: !Ref VPC
  RouteToGateway:
    DependsOn:
      - GatewayToInternet
      - GatewayAttachmentToVPC
      - RoutesForPublicSubnet
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref GatewayToInternet
      RouteTableId: !Ref RoutesForPublicSubnet
  NACLInboundEntry:
    DependsOn:
      - GenericNACL
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref GenericNACL
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: 100
  NACLOutboundEntry:
    DependsOn:
      - GenericNACL
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref GenericNACL
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: 100
  NACLBindingForPublicSubnet:
    DependsOn:
      - PublicSubnet
      - GenericNACL
      - PublicSubnet1
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref GenericNACL
  RoutesBindingForPublicSubnet:
    DependsOn:
      - RoutesForPublicSubnet
      - PublicSubnet
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RoutesForPublicSubnet
      SubnetId: !Ref PublicSubnet
  RoutesBindingForPublicSubnet1:
    DependsOn:
      - RoutesForPublicSubnet
      - PublicSubnet1
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RoutesForPublicSubnet
      SubnetId: !Ref PublicSubnet1
  InternetToLBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allows the internet to hit the LB.
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: TCP
          ToPort: 80
      VpcId: !Ref VPC
  LBToInstancesSecurityGroup:
    DependsOn:
      - InternetToLBSecurityGroup
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allows LB to hit instances
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: '-1'
          ToPort: 65535
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: TCP
          SourceSecurityGroupId: !Ref InternetToLBSecurityGroup
          ToPort: 80
        - FromPort: 22
          IpProtocol: TCP
          CidrIp: 0.0.0.0/0
          ToPort: 22
      VpcId: !Ref VPC
  LoadBalancer:
    DependsOn:
      - InternetToLBSecurityGroup
      - PublicSubnet
      - PublicSubnet1
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet
        - !Ref PublicSubnet1
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '50'
      SecurityGroups:
        - !Ref InternetToLBSecurityGroup
  InstancesToNATSecurityGroup:
    DependsOn:
      - LBToInstancesSecurityGroup
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allows the instance to hit NAT, and NAT outbound.'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: '-1'
          ToPort: 65535
      SecurityGroupIngress:
        - FromPort: 0
          IpProtocol: '-1'
          SourceSecurityGroupId: !Ref LBToInstancesSecurityGroup
          ToPort: 65535
        - FromPort: 22
          IpProtocol: TCP
          CidrIp: 0.0.0.0/0
          ToPort: 22
      VpcId: !Ref VPC
  LoadBalancerListener:
    DependsOn:
      - LoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  TargetGroup:
    DependsOn:
      - LoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 200
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Name: stelligentTG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
  InstancesGroup:
    DependsOn:
      - InstancesConfig
      - LoadBalancer
      - LoadBalancerListener
      - TargetGroup
      - PrivateSubnet
      - PrivateSubnet1
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      Cooldown: 60
      DesiredCapacity: 1
      HealthCheckGracePeriod: 50
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref InstancesConfig
      MaxSize: 2
      MetricsCollection:
        - Granularity: 1Minute
      MinSize: 0
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: PT1M01S
        WaitOnResourceSignals: false
  InstancesConfig:
    DependsOn:
      - LoadBalancer
      - LoadBalancerListener
      - TargetGroup
      - PrivateSubnet
      - PrivateSubnet1
      - LBToInstancesSecurityGroup
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap 
        - AWSLinuxAMIs
        - !Ref 'AWS::Region'
        - AMI
      InstanceMonitoring: true
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref LBToInstancesSecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - 'sudo yum install -y httpd '
            - cd /var/www/html
            - >-
              echo '<html><body>Hello World1</body></html>' | sudo tee
              index.html
            - 'sudo service httpd start '
            - 'sudo chkconfig httpd on '
Outputs:
  ELBDNS:
    Description: The DNS for the ELB / our app.
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - LoadBalancer
          - DNSName
        - /index.html
